// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCS.Data;

#nullable disable

namespace SCS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
    [Migration("20241014150002_initial")]
========
    [Migration("20241012151316_initial")]
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SCS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "City Admin",
                            Country = "Country Admin",
                            Postcode = "111111",
                            State = "State Admin",
                            Street1 = "Street 1",
                            Street2 = "Street 2"
                        });
                });

            modelBuilder.Entity("SCS.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CertificationSlotId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("VoucherKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificationSlotId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SCS.Models.Bundle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId2")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId3")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bundles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C# for beginners, Bundle",
                            Price = 8500.0,
                            ProductId1 = 3,
                            ProductId2 = 4,
                            ProductId3 = 5
                        });
                });

            modelBuilder.Entity("SCS.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProdCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SCS.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description...",
                            Name = "Certification Vouchers"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description...",
                            Name = "Learning Materials"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description...",
                            Name = "Practice Tests"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description...",
                            Name = "Bundles"
                        });
                });

            modelBuilder.Entity("SCS.Models.CertificationDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertSlotId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsCertDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CertSlotId");

                    b.ToTable("CertificationDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertSlotId = 1,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 10, 24),
========
                            Date = new DateOnly(2024, 10, 22),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 2,
                            CertSlotId = 1,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 10, 25),
========
                            Date = new DateOnly(2024, 10, 23),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 3,
                            CertSlotId = 1,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 10, 26),
========
                            Date = new DateOnly(2024, 10, 24),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 4,
                            CertSlotId = 1,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 10, 27),
========
                            Date = new DateOnly(2024, 10, 25),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 5,
                            CertSlotId = 1,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 10, 28),
========
                            Date = new DateOnly(2024, 10, 26),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 6,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 3),
========
                            Date = new DateOnly(2024, 11, 1),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 7,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 4),
========
                            Date = new DateOnly(2024, 11, 2),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 8,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 5),
========
                            Date = new DateOnly(2024, 11, 3),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 9,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 6),
========
                            Date = new DateOnly(2024, 11, 4),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 10,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 7),
========
                            Date = new DateOnly(2024, 11, 5),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 11,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 8),
========
                            Date = new DateOnly(2024, 11, 6),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 12,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 9),
========
                            Date = new DateOnly(2024, 11, 7),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 13,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 10),
========
                            Date = new DateOnly(2024, 11, 8),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 14,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 11),
========
                            Date = new DateOnly(2024, 11, 9),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 15,
                            CertSlotId = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Date = new DateOnly(2024, 11, 12),
========
                            Date = new DateOnly(2024, 11, 10),
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                            IsCertDay = false
                        });
                });

            modelBuilder.Entity("SCS.Models.CertificationSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowDays")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("CertificationSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Dates = "[\"2024-10-25\",\"2024-10-27\"]",
                            EndDate = new DateOnly(2024, 10, 28),
                            Name = "Slot1",
                            ShowDays = false,
                            StartDate = new DateOnly(2024, 10, 24)
========
                            Dates = "[\"2024-10-23\",\"2024-10-25\"]",
                            EndDate = new DateOnly(2024, 10, 26),
                            Name = "Slot1",
                            ShowDays = false,
                            StartDate = new DateOnly(2024, 10, 22)
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                        },
                        new
                        {
                            Id = 2,
<<<<<<<< HEAD:SCS.DataAccess/Migrations/20241014150002_initial.Designer.cs
                            Dates = "[\"2024-11-04\",\"2024-11-07\",\"2024-11-09\"]",
                            EndDate = new DateOnly(2024, 11, 12),
                            Name = "Slot2",
                            ShowDays = false,
                            StartDate = new DateOnly(2024, 11, 3)
========
                            Dates = "[\"2024-11-02\",\"2024-11-05\",\"2024-11-07\"]",
                            EndDate = new DateOnly(2024, 11, 10),
                            Name = "Slot2",
                            ShowDays = false,
                            StartDate = new DateOnly(2024, 11, 1)
>>>>>>>> Booking-Summary:SCS.DataAccess/Migrations/20241012151316_initial.Designer.cs
                        });
                });

            modelBuilder.Entity("SCS.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookCount")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("VoucherKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SCS.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("SCS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BundleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CertSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CertSlotId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CertSlotId = 1,
                            Description = "Certificate in Sanctions Description....",
                            Name = "Certificate in Sanctions",
                            Price = 7200.0,
                            ProviderId = 1,
                            Status = "Registred",
                            VoucherKey = "0f8fad5b-d9cb-469f-a165-70867728950e"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CertSlotId = 1,
                            Description = "Certificate in Corporate Governance Description....",
                            Name = "Certificate in Corporate Governance",
                            Price = 8400.0,
                            ProviderId = 1,
                            Status = "Registred",
                            VoucherKey = "7c9e6679-7425-40de-944b-e07fc1f90ae7"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CertSlotId = 1,
                            Description = "C# Certification Description...",
                            Name = "C# Certificate",
                            Price = 1000.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "9x9e5429-7125-299c-v09fd1390bd3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "C# Begginner Programming Description...",
                            Name = "C# Begginner",
                            Price = 200.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "456f8c27-cba3-4cc6-bc04-5dc8dcfbc737"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "C# Begginner Programming Description...",
                            Name = "C# Begginner",
                            Price = 300.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "86dc6f8d-ddf8-45b4-91a3-72e7fa8e468c"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "C# Intermediate Programming Description...",
                            Name = "C# Intermediate",
                            Price = 200.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "90897eeb-12b4-4759-9812-8909c6a335de"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "C# Intermediate Programming Description...",
                            Name = "C# Intermediate",
                            Price = 300.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "6f146a6e-4f59-4f18-8588-842ef69a6f61"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "C# Advanced Programming Description...",
                            Name = "C# Advanced",
                            Price = 200.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "4093d50e-d925-4389-ab63-e09b482efeed"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "C# Advanced Programming Description...",
                            Name = "C# Advanced",
                            Price = 300.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "8997a1db-3aab-4f9b-b5e7-6ee7dd1215dd"
                        },
                        new
                        {
                            Id = 10,
                            BundleId = 1,
                            CategoryId = 3,
                            Description = "C# Advanced Programming Description...",
                            Name = "C# for beginners, Bundle",
                            Price = 300.0,
                            ProviderId = 2,
                            Status = "Registred",
                            VoucherKey = "8e1207c0-9633-4f31-8c7c-2b040cec1307"
                        });
                });

            modelBuilder.Entity("SCS.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("StartImage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SCS.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "info@agrc.com",
                            ContactName = "AGRC Contact Name",
                            ContactPhone = "11111111",
                            Name = "AGRC"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "info@microsoft.com",
                            ContactName = "Microsoft Contact Name",
                            ContactPhone = "22222222",
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "info@google.com",
                            ContactName = "Google Contact Name",
                            ContactPhone = "33333333",
                            Name = "Google"
                        },
                        new
                        {
                            Id = 4,
                            ContactEmail = "info@redhat.com",
                            ContactName = "Red Hat Contact Name",
                            ContactPhone = "44444444",
                            Name = "Red Hat"
                        });
                });

            modelBuilder.Entity("SCS.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SCS.Models.Booking", b =>
                {
                    b.HasOne("SCS.Models.CertificationSlot", "CertificationSlot")
                        .WithMany()
                        .HasForeignKey("CertificationSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationSlot");
                });

            modelBuilder.Entity("SCS.Models.Cart", b =>
                {
                    b.HasOne("SCS.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SCS.Models.CertificationDay", b =>
                {
                    b.HasOne("SCS.Models.CertificationSlot", "CertificationSlot")
                        .WithMany("CertificationDays")
                        .HasForeignKey("CertSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationSlot");
                });

            modelBuilder.Entity("SCS.Models.OrderDetails", b =>
                {
                    b.HasOne("SCS.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SCS.Models.OrderHeader", b =>
                {
                    b.HasOne("SCS.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SCS.Models.Product", b =>
                {
                    b.HasOne("SCS.Models.Bundle", "Bundle")
                        .WithMany()
                        .HasForeignKey("BundleId");

                    b.HasOne("SCS.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.CertificationSlot", "CertificationSlot")
                        .WithMany()
                        .HasForeignKey("CertSlotId");

                    b.HasOne("SCS.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.Navigation("Bundle");

                    b.Navigation("Category");

                    b.Navigation("CertificationSlot");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("SCS.Models.ProductImage", b =>
                {
                    b.HasOne("SCS.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SCS.Models.AppUser", b =>
                {
                    b.HasOne("SCS.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SCS.Models.CertificationSlot", b =>
                {
                    b.Navigation("CertificationDays");
                });

            modelBuilder.Entity("SCS.Models.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
