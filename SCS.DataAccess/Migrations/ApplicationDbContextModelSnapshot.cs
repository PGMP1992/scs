// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCS.Data;

#nullable disable

namespace SCS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SCS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SCS.Models.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ShowOnNavbar")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lexicon",
                            ShowOnNavbar = true,
                            Slug = "lexicon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SCS",
                            ShowOnNavbar = true,
                            Slug = "scs"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C#",
                            ShowOnNavbar = true,
                            Slug = "c-sharp"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ASP.NET Core#",
                            ShowOnNavbar = false,
                            Slug = "asp-net-core"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Blazor",
                            ShowOnNavbar = true,
                            Slug = "blazor"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SQL Server",
                            ShowOnNavbar = false,
                            Slug = "sql-server"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Entity Framework Core",
                            ShowOnNavbar = false,
                            Slug = "ef-core"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Angular",
                            ShowOnNavbar = false,
                            Slug = "angular"
                        },
                        new
                        {
                            Id = 9,
                            Name = "React",
                            ShowOnNavbar = false,
                            Slug = "react"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Vue",
                            ShowOnNavbar = false,
                            Slug = "vue"
                        },
                        new
                        {
                            Id = 11,
                            Name = "JavaScript",
                            ShowOnNavbar = false,
                            Slug = "javascript"
                        },
                        new
                        {
                            Id = 12,
                            Name = "HTML",
                            ShowOnNavbar = false,
                            Slug = "html"
                        },
                        new
                        {
                            Id = 13,
                            Name = "CSS",
                            ShowOnNavbar = false,
                            Slug = "css"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Bootstrap",
                            ShowOnNavbar = false,
                            Slug = "bootstrap"
                        },
                        new
                        {
                            Id = 15,
                            Name = "MVC",
                            ShowOnNavbar = false,
                            Slug = "mvc"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Blommor",
                            ShowOnNavbar = true,
                            Slug = "blommor"
                        });
                });

            modelBuilder.Entity("SCS.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogCategoryId = 2,
                            Content = "<p> besök den https:\\scservices.se</p>",
                            CreatedAt = new DateTime(2024, 11, 16, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6795),
                            Image = "images/posts/lwbsypfb.rxe.png",
                            Introduction = "scservices har fått en ny mensida",
                            IsFeatured = true,
                            IsPublished = true,
                            PublishedAt = new DateTime(2024, 11, 16, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6795),
                            Slug = "ny-hemsida",
                            Title = "Ny hemsida",
                            ViewCount = 2
                        },
                        new
                        {
                            Id = 2,
                            BlogCategoryId = 1,
                            Content = "<p> Du hittar oss på Södergatan 24 mellan Stortorget och Gustav Adolfs Torg. Cirka 10 minuter gångväg från Centralstationen. Ingång mellan Stadium och Indiska.</p><p>Varmt välkommen att kontakta oss för mer information&nbsp;om våra erbjudanden och bokning.</p>",
                            CreatedAt = new DateTime(2024, 11, 15, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6801),
                            Image = "images/posts/e41eigqw.de2.png",
                            Introduction = "Här finns vi",
                            IsFeatured = true,
                            IsPublished = true,
                            PublishedAt = new DateTime(2024, 11, 15, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6801),
                            Slug = "ny-hemsida",
                            Title = "Lexicon i Malmö",
                            ViewCount = 4
                        },
                        new
                        {
                            Id = 3,
                            BlogCategoryId = 16,
                            Content = "<p> <span style=\"color: rgb(71, 71, 71);\">Floribundarosor, en grupp rosor med mycket komplext ursprung. Grunden till gruppen utgörs av korsningar mellan polyantarosor och rosor i andra grupper. Gruppen inkluderar även produktnamn som miniflorarosor, castlerosor och palacerosor. Motsvarar beteckningarna Floribunda och Climbing Floribunda i Modern Roses 11.&nbsp;</span><a href=\"https://sv.wikipedia.org/wiki/Floribundarosor\" target=\"_blank\" style=\"color: var(--JKqx2);\">Wikipedia</a></p>",
                            CreatedAt = new DateTime(2024, 11, 18, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6803),
                            Image = "images/posts/u1q4qomy.loi.png",
                            Introduction = "Rikblommande rosor - floribunda",
                            IsFeatured = true,
                            IsPublished = true,
                            PublishedAt = new DateTime(2024, 11, 18, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6804),
                            Slug = "rosor",
                            Title = "Rosor",
                            ViewCount = 5
                        },
                        new
                        {
                            Id = 4,
                            BlogCategoryId = 16,
                            Content = "<p><strong style=\"color: rgb(95, 99, 104);\">Lavendel</strong><span style=\"color: rgb(77, 81, 86);\">, Lavandula angustifolia, är en av de mest älskade trädgårdsväxterna. Alla bör unna sig&nbsp;</span><strong style=\"color: rgb(95, 99, 104);\">lavendel</strong><span style=\"color: rgb(77, 81, 86);\">, den trivs både i rabatten och sommarkrukan</span></p><p><br></p><p><a href=\"https://www.blomsterlandet.se/kundklubb/\" target=\"_blank\" style=\"color: rgb(222, 238, 241);\">Kundklubb</a><a href=\"https://www.blomsterlandet.se/hitta-din-butik/\" target=\"_blank\" style=\"color: rgb(222, 238, 241);\">Våra butiker</a></p><p><img src=\"https://www.blomsterlandet.se/contentassets/309cef56f7d444a0abc60d61ec24da04/lavendelhack.jpg\"></p><p>Lavendel räknas som halvbuske, eftersom den blir förvedad, och är därför inte härdig i hela landet. Ju längre norrut man bor desto viktigare är det att välja ett soligt, varmt och framförallt väldränerat läge. Lavendel älskar torr jord, gärna sandblandad, sol och värme. Även om lavendel under gynnsamma former kan klara sig i zon 5 är det att rekommendera att i zon 3 och norrut plantera lavendeln i en upphöjd rabatt – eller i krukor som du vinterförvarar ljust och frostfritt.</p><p><br></p><p>Lavendel räknas också som medicinalväxt och har lugnande och kramplösande egenskaper. Lavendelblommor ger utsökt smak i olika sorters kakor, både i småkakor, skorpor och sockerkakor.</p><p>Främst är det doften vi tycker så mycket om, denna somriga doft som i fantasin tar oss med på resor till Provence och Toscana.</p>",
                            CreatedAt = new DateTime(2024, 11, 12, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6806),
                            Image = "images/posts/yujd3vy3.mmp.png",
                            Introduction = "Lavendel, Lavandula angustifolia, är en av de mest älskade trädgårdsväxterna. Alla bör unna sig lavendel, den trivs både i rabatten och sommarkrukan",
                            IsFeatured = true,
                            IsPublished = true,
                            PublishedAt = new DateTime(2024, 11, 12, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6806),
                            Slug = "lavendel",
                            Title = "Lavendel",
                            ViewCount = 3
                        },
                        new
                        {
                            Id = 5,
                            BlogCategoryId = 3,
                            Content = "<p> https://www.w3schools.com/cs/index.php</p><h2>What is C#?</h2><p>C# is pronounced \"C-Sharp\".</p><p>It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.</p><p>C# has roots from the C family, and the language is close to other popular languages like&nbsp;<a href=\"https://www.w3schools.com/cpp/default.asp\" target=\"_blank\" style=\"color: inherit;\">C++</a>&nbsp;and&nbsp;<a href=\"https://www.w3schools.com/java/default.asp\" target=\"_blank\" style=\"color: inherit;\">Java</a>.</p><p>The first version was released in year 2002. The latest version,&nbsp;<strong>C# 12</strong>, was released in November 2023.</p><p>C# is used for:</p><ul><li>Mobile applications</li><li>Desktop applications</li><li>Web applications</li><li>Web services</li><li>Web sites</li><li>Games</li><li>VR</li><li>Database applications</li><li>And much, much more!</li></ul><h2>Why Use C#?</h2><ul><li>It is one of the most popular programming languages in the world</li><li>It is easy to learn and simple to use</li><li>It has huge community support</li><li>C# is an object-oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs</li><li>As C# is close to&nbsp;<a href=\"https://www.w3schools.com/c/index.php\" target=\"_blank\" style=\"color: inherit;\">C</a>,&nbsp;<a href=\"https://www.w3schools.com/cpp/default.asp\" target=\"_blank\" style=\"color: inherit;\">C++</a>&nbsp;and&nbsp;<a href=\"https://www.w3schools.com/java/default.asp\" target=\"_blank\" style=\"color: inherit;\">Java</a>, it makes it easy for programmers to switch to C# or vice versa</li></ul><h2>Get Started</h2><p>This tutorial will teach you the basics of C#.</p><p>It is not necessary to have any prior programming experience.</p>",
                            CreatedAt = new DateTime(2024, 11, 11, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6808),
                            Image = "images/posts/kcukikkw.lb3.png",
                            Introduction = "C# (C-Sharp) is a programming language developed by Microsoft that runs on the .NET",
                            IsFeatured = true,
                            IsPublished = true,
                            PublishedAt = new DateTime(2024, 11, 11, 15, 16, 7, 190, DateTimeKind.Local).AddTicks(6809),
                            Slug = "guide",
                            Title = "Guide",
                            ViewCount = 1
                        });
                });

            modelBuilder.Entity("SCS.Models.BlogSubscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("SubscribedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BlogSubscribers");
                });

            modelBuilder.Entity("SCS.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("VoucherKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SCS.Models.Bundle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId2")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId3")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bundles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C# for beginners, Bundle",
                            Price = 8500.0,
                            ProductId1 = 3,
                            ProductId2 = 4,
                            ProductId3 = 5
                        });
                });

            modelBuilder.Entity("SCS.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProdCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SCS.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description...",
                            Name = "Certification Vouchers"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description...",
                            Name = "Learning Materials"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description...",
                            Name = "Practice Tests"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description...",
                            Name = "Bundles"
                        });
                });

            modelBuilder.Entity("SCS.Models.CertificationDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertSlotId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsCertDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CertSlotId");

                    b.ToTable("CertificationDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertSlotId = 1,
                            Date = new DateOnly(2024, 11, 29),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 2,
                            CertSlotId = 1,
                            Date = new DateOnly(2024, 11, 30),
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 3,
                            CertSlotId = 1,
                            Date = new DateOnly(2024, 12, 1),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 4,
                            CertSlotId = 1,
                            Date = new DateOnly(2024, 12, 2),
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 5,
                            CertSlotId = 1,
                            Date = new DateOnly(2024, 12, 3),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 6,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 9),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 7,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 10),
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 8,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 11),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 9,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 12),
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 10,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 13),
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 11,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 14),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 12,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 15),
                            IsCertDay = true
                        },
                        new
                        {
                            Id = 13,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 16),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 14,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 17),
                            IsCertDay = false
                        },
                        new
                        {
                            Id = 15,
                            CertSlotId = 2,
                            Date = new DateOnly(2024, 12, 18),
                            IsCertDay = false
                        });
                });

            modelBuilder.Entity("SCS.Models.CertificationSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ShowDays")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("CertificationSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dates = "[\"2024-11-30\",\"2024-12-02\"]",
                            EndDate = new DateOnly(2024, 12, 3),
                            Name = "Sanctions",
                            ShowDays = false,
                            StartDate = new DateOnly(2024, 11, 29)
                        },
                        new
                        {
                            Id = 2,
                            Dates = "[\"2024-12-10\",\"2024-12-13\",\"2024-12-15\"]",
                            EndDate = new DateOnly(2024, 12, 18),
                            Name = "C# Beginner",
                            ShowDays = false,
                            StartDate = new DateOnly(2024, 12, 9)
                        });
                });

            modelBuilder.Entity("SCS.Models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookCount")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("VoucherKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SCS.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("SCS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BundleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CertSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CertSlotId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CertSlotId = 1,
                            Description = "Certificate in Sanctions Description....",
                            Name = "Certificate in Sanctions",
                            Price = 7200.0,
                            ProviderId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Certificate in Corporate Governance Description....",
                            Name = "Certificate in Corporate Governance",
                            Price = 8400.0,
                            ProviderId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            BundleId = 1,
                            CategoryId = 1,
                            Description = "C# Certification Description...",
                            Name = "C# Certificate",
                            Price = 1000.0,
                            ProviderId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            BundleId = 1,
                            CategoryId = 2,
                            Description = "C# Begginner Programming Description...",
                            Name = "C# Beginner",
                            Price = 200.0,
                            ProviderId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            BundleId = 1,
                            CategoryId = 3,
                            Description = "C# Begginner Programming Description...",
                            Name = "C# Beginner",
                            Price = 300.0,
                            ProviderId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 10,
                            BundleId = 1,
                            CategoryId = 4,
                            Description = "C# Advanced Programming Description...",
                            Name = "C# for beginners, Bundle",
                            Price = 300.0,
                            ProviderId = 2,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("SCS.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("StartImage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SCS.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "info@agrc.com",
                            ContactName = "AGRC Contact Name",
                            ContactPhone = "11111111",
                            Name = "AGRC"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "info@microsoft.com",
                            ContactName = "Microsoft Contact Name",
                            ContactPhone = "22222222",
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "info@google.com",
                            ContactName = "Google Contact Name",
                            ContactPhone = "33333333",
                            Name = "Google"
                        },
                        new
                        {
                            Id = 4,
                            ContactEmail = "info@redhat.com",
                            ContactName = "Red Hat Contact Name",
                            ContactPhone = "44444444",
                            Name = "Red Hat"
                        });
                });

            modelBuilder.Entity("SCS.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SCS.Models.BlogPost", b =>
                {
                    b.HasOne("SCS.Models.BlogCategory", "BlogCategory")
                        .WithMany()
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BlogCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SCS.Models.Booking", b =>
                {
                    b.HasOne("SCS.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SCS.Models.Cart", b =>
                {
                    b.HasOne("SCS.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SCS.Models.CertificationDay", b =>
                {
                    b.HasOne("SCS.Models.CertificationSlot", "CertificationSlot")
                        .WithMany("CertificationDays")
                        .HasForeignKey("CertSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationSlot");
                });

            modelBuilder.Entity("SCS.Models.OrderDetails", b =>
                {
                    b.HasOne("SCS.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SCS.Models.OrderHeader", b =>
                {
                    b.HasOne("SCS.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SCS.Models.Product", b =>
                {
                    b.HasOne("SCS.Models.Bundle", "Bundle")
                        .WithMany()
                        .HasForeignKey("BundleId");

                    b.HasOne("SCS.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCS.Models.CertificationSlot", "CertificationSlot")
                        .WithMany()
                        .HasForeignKey("CertSlotId");

                    b.HasOne("SCS.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.Navigation("Bundle");

                    b.Navigation("Category");

                    b.Navigation("CertificationSlot");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("SCS.Models.ProductImage", b =>
                {
                    b.HasOne("SCS.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SCS.Models.AppUser", b =>
                {
                    b.HasOne("SCS.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SCS.Models.CertificationSlot", b =>
                {
                    b.Navigation("CertificationDays");
                });

            modelBuilder.Entity("SCS.Models.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
